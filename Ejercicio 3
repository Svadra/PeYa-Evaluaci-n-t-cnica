-- 3.Usando todas las órdenes en la base, calcular el promedio de días entre una orden y la siguiente a nivel
usuario, solo para usuarios con al menos 5 órdenes totales. De ese resultado, quedarse solo con usuarios con
un promedio mayor a 5 días.

WITH user_orders AS (
    -- Obtener las órdenes de cada usuario, ordenadas por fecha
    SELECT 
        user_id,
        order_date,
        LAG(order_date) OVER (PARTITION BY user_id ORDER BY order_date) AS prev_order_date
    FROM orders_sample
),
days_between_orders AS (
    -- Calcular la diferencia en días entre órdenes consecutivas
    SELECT 
        user_id,
        JULIANDAY(order_date) - JULIANDAY(prev_order_date) AS days_diff
    FROM user_orders
    WHERE prev_order_date IS NOT NULL -- Excluir la primera orden que no tiene una anterior
),
user_avg_days AS (
    -- Calcular el promedio de días entre órdenes y contar el total de órdenes por usuario
    SELECT 
        user_id,
        AVG(days_diff) AS avg_days_between_orders,
        COUNT(*) + 1 AS total_orders -- Contar todas las órdenes (incluyendo la primera)
    FROM days_between_orders
    GROUP BY user_id
),
filtered_users AS (
    -- Filtrar usuarios con al menos 5 órdenes totales
    SELECT 
        user_id,
        avg_days_between_orders,
        total_orders
    FROM user_avg_days
    WHERE total_orders >= 5 -- Al menos 5 órdenes
)
-- Filtrar usuarios con un promedio de días mayor a 5
SELECT 
    user_id,
    total_orders,
    ROUND(avg_days_between_orders, 2) AS avg_days_between_orders
FROM filtered_users
WHERE avg_days_between_orders > 5;

--Cálculo de la media y  mediana de recompra

import numpy as np

# Lista de números proporcionados
numbers = [
    9.33, 9.12, 9.05, 8.93, 8.75, 8.43, 8.35, 8.05, 7.11, 6.29, 6.21, 5.23,
    5.15, 26.2, 26.12, 25.76, 24.66, 22.28, 21.95, 21.16, 20.6, 19.63, 19.57,
    18.83, 18.62, 18.62, 17.86, 17.64, 16.8, 16.67, 16.62, 16.49, 16.44, 16.11,
    15.75, 15.22, 15.15, 14.99, 14.8, 14.79, 14.69, 14.58, 14.44, 14.35, 14.25,
    14.14, 13.47, 12.27, 12.05, 11.76, 11.5, 11.01, 10.97, 10.49, 10.48, 10.36,
    10.28, 10.28, 10.28
]

# Calcular la media y la mediana
mean_value = np.mean(numbers)
median_value = np.median(numbers)

mean_value, median_value


-- Cálculo de la media y mediana de ordenes

# Nueva lista de números proporcionados
numbers_2 = [
    16, 16, 13, 15, 17, 14, 15, 19, 19, 20, 13, 28, 28, 6, 6, 5, 7, 7, 7, 7,
    6, 8, 6, 7, 9, 9, 8, 8, 6, 9, 9, 9, 8, 8, 9, 10, 7, 11, 9, 10, 11, 7, 10,
    11, 9, 8, 5, 11, 13, 10, 9, 13, 11, 11, 13, 15, 14, 15, 15
]

# Calcular la media y la mediana
mean_value_2 = np.mean(numbers_2)
median_value_2 = np.median(numbers_2)

mean_value_2, median_value_2

